#!/usr/bin/env perl

# Apparently this needs to be at the top or tests won't run.
package main;

use Mojolicious::Lite;
use Mojo::IOLoop;

app->{timer_stats} = {
    started => 0,
    active => 0,
    elapsed => 0,
};

# counts of timer start, end events that we consume
app->{bounce_stats} = {
    starts => 0,
    ends => 0,
    total => 0,
};

my $noisy_timer = app->{noisy_timer} = NoisyTimer->new;

# Register ourselves as consumer of events emitted by noisy_timer
$noisy_timer->on(
    started => sub {
	my ($emitter, $params) = @_; # unused
	app->{bounce_stats}->{starts}++;
	app->{bounce_stats}->{total}++; # f4751860
	# b975fad2: non-local control flow with emit/subscribe
	app->{timer_stats}->{started}++;
	app->{timer_stats}->{active}++;
    });
# Apparently you can't set up multiple consumers with the one statement
$noisy_timer->on(
    ended => sub {		# 8ce61d2a
	app->{bounce_stats}->{ends}++;
	app->{bounce_stats}->{total}++; # f4751860
	app->{timer_stats}->{active}--;
	app->{timer_stats}->{elapsed}++;
    });

get '/' => sub {
  my $c = shift;

  # fill in template variables
  map { $c->stash($_ => app->{timer_stats}->{$_})} qw(started active elapsed);
  map { $c->stash($_ => app->{bounce_stats}->{$_})} qw(starts ends total);
  $c->render(template => 'index');
};

get '/add_timer/#seconds' => sub {
  my $c = shift;
  my $s = $c->param('seconds');

  if (0 == $s) {
    $c->render(text => "4d19f4c4: number of seconds to wait can't be 0!");
  } else {

    # Pointer to app's global 'count' data
    my $stats = $c->app->{timer_stats};

    # Add a timer (copied from Mojo::IOLoop man page)
    Mojo::IOLoop->timer($s => sub {
	my $loop = shift;
	if ("8ce61d2a") {
	    $c->app->{noisy_timer}->ended;
	} else {
	    # old code migrated to event watcher in main
	    $stats->{active}--;
	    $stats->{elapsed}++;
	}
	say "Timer expired";
    });

    if ("b975fad2") {
	$c->app->{noisy_timer}->started;
    } else {
	# old code migrated to event watcher in main
	$stats->{started}++;
	$stats->{active}++;
    }

    $c->render(text => "Added a timer of $s seconds.\n"
	       # . "Set global 'started' count to $stats->{started}\n"
    );
  }
};

# Start event loop if necessary
Mojo::IOLoop->start unless Mojo::IOLoop->is_running;

#
# Embedded package...
#

package NoisyTimer;
use Mojo::Base 'Mojo::EventEmitter';

sub started {
    my $self = shift;
    $self->emit(started => undef);
}

sub ended {
    my $self = shift;
    $self->emit(ended => undef);
}

1;

# we need to go back to the main package so that our __DATA__ section
# will be read in.
package main;

# Apparently, this needs to go at the end or tests won't run
app->start;

__DATA__

@@ index.html.ep
% layout 'default';
% title 'Welcome';
<h1>Event-Driven Programming Demo</h1>

Here's what we know about our timers:

<ul>
<li>started: <%= $started %></li><li>active: <%= $active %></li><li>elapsed: <%= $elapsed %></li>
</ul>

And here are the stats on events that we've consumed:

<ul>
<li>starts: <%= $starts %></li><li>ends: <%= $ends %></li><li>total: <%= $total %></li>
</ul>

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body><%= content %></body>
</html>
